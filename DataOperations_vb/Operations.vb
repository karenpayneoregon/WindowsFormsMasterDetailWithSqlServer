Imports System.Data.SqlClient
Imports System.Windows.Forms

Public Class Operations

    Private ConnectionString As String = "Data Source=.\SQLEXPRESS;" &
                                         "Initial Catalog=MasterDetailSimple;" &
                                         "Integrated Security=True"
    Public Property HasErrors As Boolean
    Public Property ExceptionMessage As String
    Public Property StateInformation As List(Of StateItems)

    Public Sub New()
        GetStateInformation()
    End Sub
    ''' <summary>
    ''' Read state table data into a list
    ''' </summary>
    ''' <remarks>
    ''' First row is virtual
    ''' </remarks>
    Private Sub GetStateInformation()
        StateInformation = New List(Of StateItems)
        StateInformation.Add(New StateItems With {.Identifier = -1, .Name = "Select one"})

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn}

                cmd.CommandText = "SELECT id,StateName,StateAbbrev FROM StateLookup"

                cn.Open()

                Dim reader As SqlDataReader = cmd.ExecuteReader
                While reader.Read
                    StateInformation.Add(New StateItems With
                        {
                            .Identifier = reader.GetInt32(0),
                            .Name = reader.GetString(1),
                            .Abbreviation = reader.GetString(2)
                        })
                End While

            End Using
        End Using
    End Sub
    ''' <summary>
    ''' Initial data loaded was generated by Red Gate SQL Data Generator
    ''' so the invoice numbers will be different than the ones created
    ''' here with the database sequence I have provided here.
    ''' </summary>
    Public Sub LoadData(
        pCustomer As BindingSource,
        pOrders As BindingSource,
        pOrderDetails As BindingSource)

        Dim ds As New DataSet

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Dim da As New SqlDataAdapter(
                "SELECT id,AccountNumber, FirstName,LastName," &
                "Address,City,State,ZipCode FROM Customer ORDER BY AccountNumber", cn)
            Try
                da.Fill(ds, "Customer")

                da = New SqlDataAdapter("SELECT id,CustomerId,OrderDate,Invoice FROM Orders", cn)
                da.Fill(ds, "Orders")
                ds.SetRelation("Customer", "Orders", "Id", "CustomerId")

                da = New SqlDataAdapter("SELECT id,OrderId ,ProductName,UnitPrice,Quantity FROM OrderDetails", cn)
                da.Fill(ds, "OrderDetails")
                ds.SetRelation("Orders", "OrderDetails", "Id", "OrderId")

                pCustomer.DataSource = ds
                pCustomer.DataMember = ds.Tables(0).TableName

                pOrders.DataSource = pCustomer
                pOrders.DataMember = ds.Relations(0).RelationName
                pOrderDetails.DataSource = pOrders
                pOrderDetails.DataMember = ds.Relations(1).RelationName

            Catch ex As Exception

                HasErrors = True
                ExceptionMessage = ex.Message

            End Try
        End Using
    End Sub
    ''' <summary>
    ''' Add new order for a customer
    ''' </summary>
    ''' <param name="CustomerId">Identifies the customer for this order</param>
    ''' <param name="OrderDate"></param>
    ''' <param name="Invoice"></param>
    ''' <param name="NewPrimaryKeyValue">new primary key for new order row</param>
    ''' <remarks>
    ''' Here I'm using NewPrimaryKeyValue as success of the operations
    ''' while in AddCustomer I use a function returning a bool. I simply
    ''' wanted to show two variations on how one might write this code.
    ''' </remarks>
    Public Sub AddOrder(CustomerId As Integer, OrderDate As Date, ByRef Invoice As String, ByRef NewPrimaryKeyValue As Integer)

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn}

                cmd.CommandText = "INSERT INTO Orders (CustomerId,OrderDate,Invoice) " &
                                  "VALUES (@CustomerId,@OrderDate,@Invoice)"

                Try
                    cn.Open()

                    cmd.Parameters.AddWithValue("@CustomerId", CustomerId)
                    cmd.Parameters.AddWithValue("@OrderDate", Now)

                    Invoice = GenerateInvoice(cn)

                    cmd.Parameters.AddWithValue("@Invoice", Invoice)

                    Dim result As Integer = cmd.ExecuteNonQuery()

                    If result = 1 Then
                        cmd.CommandText = "Select @@Identity"
                        NewPrimaryKeyValue = CInt(cmd.ExecuteScalar)
                    End If

                Catch ex As Exception
                    HasErrors = True
                    ExceptionMessage = ex.Message
                    NewPrimaryKeyValue = -1
                End Try

            End Using
        End Using
    End Sub
    ''' <summary>
    ''' We only permit order date changed as the invoice is a generated value that in my
    ''' cases a business rule to not permit the value to change.
    ''' </summary>
    ''' <param name="id"></param>
    ''' <param name="OrderDate"></param>
    ''' <returns></returns>
    Public Function UpdateOrder(id As Integer, OrderDate As Date) As Boolean
        Dim success As Boolean = False

        Dim updateStatement As String = "UPDATE Orders  SET OrderDate = @OrderDate WHERE id = @Id"

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn, .CommandText = updateStatement}

                cmd.Parameters.AddWithValue("@OrderDate", OrderDate)
                cmd.Parameters.AddWithValue("@id", id)

                Try
                    cn.Open()
                    success = cmd.ExecuteNonQuery = 1
                Catch ex As Exception
                    HasErrors = True
                    ExceptionMessage = ex.Message
                End Try
            End Using
        End Using

        Return success

    End Function
    ''' <summary>
    ''' Remove a single order
    ''' </summary>
    ''' <param name="OrderId">Primary key to identify a valid order record</param>
    Public Function RemoveSingleOrder(OrderId As Integer) As Boolean
        Dim success As Boolean = False

        Dim deleteStatement As String = "DELETE FROM [dbo].[Orders] WHERE id = @id"

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn, .CommandText = deleteStatement}

                cmd.Parameters.AddWithValue("id", OrderId)

                Try
                    cn.Open()
                    success = cmd.ExecuteNonQuery = 1
                Catch ex As Exception
                    HasErrors = True
                    ExceptionMessage = ex.Message
                End Try
            End Using
        End Using

        Return success

    End Function
    ''' <summary>
    ''' Add a new customer
    ''' </summary>
    ''' <param name="FirstName"></param>
    ''' <param name="LastName"></param>
    ''' <param name="Address"></param>
    ''' <param name="City"></param>
    ''' <param name="State"></param>
    ''' <param name="ZipCode"></param>
    ''' <param name="NewPrimaryKeyValue">new primary key for newly added customer row</param>
    ''' <returns></returns>
    ''' <remarks>
    ''' See comments in AddOrder as I did this method different than AddOrder
    ''' to show variations.
    ''' </remarks>
    Public Function AddCustomer(FirstName As String, LastName As String, Address As String, City As String, State As String, ZipCode As String, ByRef NewPrimaryKeyValue As Integer) As Boolean

        Dim Success As Boolean = False

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn}

                cmd.CommandText = "INSERT INTO Customer (FirstName,LastName,[Address],City,[State],ZipCode) " &
                                  "VALUES (@FirstName,@LastName,@Address,@City,@State,@ZipCode)"

                Try
                    cmd.Parameters.AddWithValue("@FirstName", FirstName)
                    cmd.Parameters.AddWithValue("@LastName", LastName)
                    cmd.Parameters.AddWithValue("@Address", Address)
                    cmd.Parameters.AddWithValue("@City", City)
                    cmd.Parameters.AddWithValue("@State", State)
                    cmd.Parameters.AddWithValue("@ZipCode", ZipCode)

                    cn.Open()

                    Dim result As Integer = cmd.ExecuteNonQuery()

                    If result = 1 Then
                        cmd.CommandText = "Select @@Identity"
                        NewPrimaryKeyValue = CInt(cmd.ExecuteScalar)
                        Success = True
                    End If

                Catch ex As Exception

                    HasErrors = True
                    ExceptionMessage = ex.Message

                    NewPrimaryKeyValue = -1

                    Success = False

                End Try
            End Using
        End Using

        Return Success

    End Function
    ''' <summary>
    ''' Remove customer (master) by primary key along with tha orders (children).
    ''' To be safe a transaction is used.
    ''' </summary>
    ''' <param name="id"></param>
    ''' <returns></returns>
    Public Function RemoveCustomerAndOrders(id As Integer) As Boolean

        Dim deleteStatement = "DELETE FROM Orders WHERE CustomerId =  @CustomerId"
        Dim success As Boolean = False

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}

            cn.Open()

            Dim trans As SqlTransaction = cn.BeginTransaction("DeleteOps")

            Using cmd As New SqlCommand With {.Connection = cn, .CommandText = deleteStatement, .Transaction = trans}

                cmd.Parameters.AddWithValue("@CustomerId", id)

                Try
                    cmd.ExecuteNonQuery()
                    cmd.Parameters.Clear()
                    cmd.Parameters.AddWithValue("@Id", id)
                    cmd.CommandText = "DELETE FROM Customer WHERE  id = @id"

                    cmd.ExecuteNonQuery()
                    trans.Commit()

                    success = True

                Catch ex As Exception

                    HasErrors = True
                    ExceptionMessage = ex.Message

                    Try

                        trans.Rollback()

                    Catch transEx As Exception

                        HasErrors = True
                        ExceptionMessage = transEx.Message

                    End Try

                End Try
            End Using
        End Using

        Return success

    End Function
    ''' <summary>
    ''' Update a customer
    ''' </summary>
    ''' <param name="CustomerRow"></param>
    ''' <returns></returns>
    Public Function UpdateCustomer(CustomerRow As DataRow) As Boolean

        Dim success As Boolean = False

        Dim updateStatement As String = "UPDATE Customer  SET FirstName = @FirstName," &
                                        "LastName = @LastName,[Address] = @Address,City = @City," &
                                        "[State] = @State,ZipCode = @ZipCode WHERE id = @Id"

        Using cn As New SqlConnection With {.ConnectionString = ConnectionString}
            Using cmd As New SqlCommand With {.Connection = cn, .CommandText = updateStatement}

                cmd.Parameters.AddWithValue("@FirstName", CustomerRow.Field(Of String)("FirstName"))
                cmd.Parameters.AddWithValue("@LastName", CustomerRow.Field(Of String)("LastName"))
                cmd.Parameters.AddWithValue("Address", CustomerRow.Field(Of String)("Address"))
                cmd.Parameters.AddWithValue("@City", CustomerRow.Field(Of String)("City"))
                cmd.Parameters.AddWithValue("@State", CustomerRow.Field(Of String)("State"))
                cmd.Parameters.AddWithValue("@ZipCode", CustomerRow.Field(Of String)("ZipCode"))
                cmd.Parameters.AddWithValue("@id", CustomerRow.Field(Of Integer)("id"))

                Try
                    cn.Open()
                    success = cmd.ExecuteNonQuery = 1
                Catch ex As Exception

                    HasErrors = True
                    ExceptionMessage = ex.Message

                End Try
            End Using
        End Using

        Return success

    End Function
    ''' <summary>
    ''' Calls a database sequence in the database to get 
    ''' a unique invoice number
    ''' 
    ''' Requires a open connection as per above.
    ''' </summary>
    ''' <param name="cn"></param>
    ''' <returns></returns>
    Public Function GenerateInvoice(cn As SqlConnection) As String

        Dim result As String = ""

        Dim selectStatement As String =
                "SELECT CONVERT(VARCHAR(4), GETDATE(), 12) + RIGHT('0000' + " &
                "CAST( NEXT VALUE FOR dbo.GetInvoiceNumber AS VARCHAR(3)),4)"

        Using cmd As New SqlCommand With {.Connection = cn, .CommandText = selectStatement}
            result = cmd.ExecuteScalar.ToString
        End Using

        Return result

    End Function

End Class
